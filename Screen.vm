function Screen.init 2
push constant 0
not
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 1
pop local 0
label L0
push local 1
push constant 16
lt
not
if-goto L1
push local 1
push static 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto L0
label L1
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label L2
push local 0
push constant 24575
lt
not
if-goto L3
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto L2
label L3
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 5
push argument 0
push constant 16
call Math.divide 2
pop local 4
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push local 4
add
pop local 0
push argument 0
push local 4
push constant 16
call Math.multiply 2
sub
pop local 2
push local 2
push static 1
add
pop pointer 1
push that 0
pop local 1
push local 0
call Memory.peek 1
pop local 3
push static 0
not
if-goto L4
push local 3
push local 1
or
pop local 3
goto L5
label L4
push local 3
push local 1
not
and
pop local 3
label L5
push local 0
push local 3
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 6
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
push local 3
push constant 0
eq
not
if-goto L6
push argument 2
push argument 0
gt
not
if-goto L8
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontal 3
pop temp 0
goto L9
label L8
push argument 2
push argument 0
push argument 1
call Screen.drawHorizontal 3
pop temp 0
label L9
push constant 0
return
goto L7
label L6
label L7
push local 2
push constant 0
lt
not
if-goto L10
push local 2
neg
pop local 2
push argument 0
pop local 5
push argument 2
pop argument 0
push local 5
pop argument 2
push argument 1
pop local 5
push argument 3
pop argument 1
push local 5
pop argument 3
push local 3
neg
pop local 3
goto L11
label L10
label L11
push local 3
push constant 0
lt
not
if-goto L12
push local 3
neg
pop local 3
push constant 1
neg
pop local 5
goto L13
label L12
push constant 1
pop local 5
label L13
label L14
push local 0
push local 2
gt
push local 1
push local 3
gt
or
push local 0
push constant 0
lt
or
push local 1
push constant 0
lt
or
not
not
if-goto L15
push argument 0
push local 0
add
push argument 1
push local 5
push local 1
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto L16
push local 0
push constant 1
add
pop local 0
push local 4
push local 3
add
pop local 4
goto L17
label L16
push local 1
push constant 1
add
pop local 1
push local 4
push local 2
sub
pop local 4
label L17
goto L14
label L15
push constant 0
return
function Screen.drawHorizontal 9
push argument 0
push constant 16
call Math.divide 2
pop local 4
push constant 16384
push argument 2
push constant 32
call Math.multiply 2
add
push local 4
add
pop local 7
push argument 0
push local 4
push constant 16
call Math.multiply 2
sub
pop local 2
push argument 1
push constant 16
call Math.divide 2
pop local 4
push constant 16384
push argument 2
push constant 32
call Math.multiply 2
add
push local 4
add
pop local 8
push argument 1
push local 4
push constant 16
call Math.multiply 2
sub
pop local 3
push local 7
push local 8
eq
not
if-goto L18
push local 2
push local 3
sub
call Math.abs 1
push constant 1
add
pop local 4
push local 2
push local 3
call Math.min 2
pop local 2
label L20
push local 4
push constant 0
gt
not
if-goto L21
push local 5
push local 2
push static 1
add
pop pointer 1
push that 0
add
pop local 5
push local 4
push constant 1
sub
pop local 4
push local 2
push constant 1
add
pop local 2
goto L20
label L21
push local 7
call Memory.peek 1
pop local 0
push static 0
not
if-goto L22
push local 0
push local 5
or
pop local 0
goto L23
label L22
push local 0
push local 5
not
and
pop local 0
label L23
push local 7
push local 0
call Memory.poke 2
pop temp 0
push constant 0
return
goto L19
label L18
label L19
label L24
push local 2
push constant 15
gt
not
not
if-goto L25
push local 5
push local 2
push static 1
add
pop pointer 1
push that 0
add
pop local 5
push local 2
push constant 1
add
pop local 2
goto L24
label L25
label L26
push local 3
push constant 0
lt
not
not
if-goto L27
push local 6
push local 3
push static 1
add
pop pointer 1
push that 0
add
pop local 6
push local 3
push constant 1
sub
pop local 3
goto L26
label L27
push local 7
call Memory.peek 1
pop local 0
push local 8
call Memory.peek 1
pop local 1
push static 0
not
if-goto L28
push local 0
push local 5
or
pop local 0
push local 1
push local 6
or
pop local 1
goto L29
label L28
push local 0
push local 5
not
and
pop local 0
push local 1
push local 6
not
and
pop local 1
label L29
push local 7
push local 0
call Memory.poke 2
pop temp 0
push local 8
push local 1
call Memory.poke 2
pop temp 0
push local 7
push constant 1
add
pop local 7
label L30
push local 7
push local 8
lt
not
if-goto L31
push local 7
push static 0
call Memory.poke 2
pop temp 0
push local 7
push constant 1
add
pop local 7
goto L30
label L31
push constant 0
return
function Screen.drawRectangle 0
label L32
push argument 1
push argument 3
gt
not
not
if-goto L33
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontal 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto L32
label L33
push constant 0
return
function Screen.drawCircle 2
push argument 2
neg
push constant 1
add
pop local 0
label L34
push local 0
push argument 2
lt
not
if-goto L35
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawHorizontal 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto L34
label L35
push argument 0
push argument 1
push argument 2
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push argument 1
push argument 2
sub
call Screen.drawPixel 2
pop temp 0
push constant 0
return
